#********************************************************************
# The config of zookeeper Properties
#
# NOTE - The properties has be created by cos.jar.ZookeeperRunner.
#        String val = getString("<key>", "<defult>");	
#********************************************************************
#客户端连接server的端口，即对外服务端口，ZK缺省为2181
#在COS环境下和主控(UDP)端口一致。
clientPort=

#ZK中的一个时间单元。ZK中所有时间都是以这个时间单元为基础，进行整数倍配置的。例如，session的最小超时时间是2*tickTime。
tickTime=2000

#存储快照文件snapshot的目录。默认情况下，事务日志也会存储在这里。建议同时配置参数dataLogDir, 事务日志的写性能直接影响zk性能。
#在COS环境下数据目录默认为data/zkdat
dataDir=

#事务日志输出目录。尽量给事务日志的输出配置单独的磁盘或是挂载点，这将极大的提升ZK性能。
#在COS环境下数据目录默认为data/zklog
dataLogDir=

#最大请求堆积数。默认是1000。
#ZK运行的时候， 尽管server已经没有空闲来处理更多的客户端请求了，但是还是允许客户端将请求提交到服务器上来，以提高吞吐性能。
#当然，为了防止Server内存溢出，这个请求堆积数还是需要限制下的。 
globalOutstandingLimit=
#(Java system property:zookeeper.globalOutstandingLimit.)

#预先开辟磁盘空间，用于后续写入事务日志。默认是64M，每个事务日志大小就是64M。如果ZK的快照频率较大的话，建议适当减小这个参数。
preAllocSize=
#(Java system property:zookeeper.preAllocSize)

#每进行snapCount次事务日志输出后，触发一次快照 (snapshot), 此时，ZK会生成一个snapshot.*文件，同时创建一个新的事务日志文件log.*。
#默认是100000.（真正的代码实现中，会进行一定的随机数 处理，以避免所有服务器在同一时间进行快照而影响性能）
snapCount=
#(Java system property:zookeeper.snapCount)

#用于记录所有请求的log，一般调试过程中可以使用，但是生产环境不建议使用，会严重影响性能。
traceFile=
#(Java system property:? requestTraceFile)

#单个客户端与单台服务器之间的连接数的限制，是ip级别 的，默认是60，如果设置为0，那么表明不作任何限制。
#请注意这个限制的使用范围，仅仅是单台客户端机器与单台ZK服务器之间的连接数限制，不是针对指定 客户端IP，也不是ZK集群的连接数限制，也不是单台ZK对所有客户端的连接数限制。
#指定客户端IP的限制策略，这里有一个patch，可以尝试一下：http://rdc.taobao.com/team/jm/archives/1334
maxClientCnxns=
#（No Java system property）

#对于多网卡的机器，可以为每个IP指定不同的监听端口。默认情况是所有IP都监听 clientPort指定的端口。 New in 3.3.0
clientPortAddress=

#Session超时时间限制，如果客户端设置的超时时间不在这个范围，那么会被强制设置为最大或最小时间。
#默认的Session超时时间是在2 * tickTime ~ 20 * tickTime 这个范围 New in 3.3.0
minSessionTimeout=
maxSessionTimeout=

#事务日志输出时，如果调用fsync方法超过指定的超时时间，那么会在日志中输出警告信息。默认是1000ms。
fsync.warningthresholdms=
#(Java system property: fsync.warningthresholdms)New in 3.3.4

#3.4.0及之后版本，ZK提供了自动清理事务日志和快照文件的功能，这个参数指定了清理频率，单位是小时，需要配置一个1或更大的整数，默认是0，表示不开启自动清理功能。
autopurge.purgeInterval=24
#(No Java system property) New in 3.4.0

#这个参数和上面的参数搭配使用，这个参数指定了需要保留的文件数目。默认是保留3个。(No Java system property) New in 3.4.0
autopurge.snapRetainCount=10

#Follower在启动过程中，会从Leader同步所有最新数据，然后确定自己能够对外服务的起始状态。
#Leader允许F在initLimit时间内完成这个工作。
#通常情况下，我们不用太在意这个参数的设置。
#如果ZK集群的数据量确实很大了，F在启动的时候，从Leader上同步数据的时间也会相应变长，因此在这种情况下，有必要适当调大这个参数了。
initLimit=5
#(No Java system property)

#在运行过程中，Leader负责与ZK集群中所有机器进行 通信，例如通过一些心跳检测机制，来检测机器的存活状态。
#如果L发出心跳包在syncLimit之后，还没有从F那里收到响应，那么就认为这个F已经不在 线了。
#注意：不要把这个参数设置得过大，否则可能会掩盖一些问题。
syncLimit=2
#(No Java system property)

#默认情况下，Leader是会接受客户端连接，并提供正常的读写服务。
#但是，如果你想让Leader专注于集群中机器的协调，那么可以将这个参数设置为no，这样一来，会大大提高写操作的性能。
leaderServes=
#(Java system property: zookeeper.leaderServes)。

#group.x=nnnnn[:nnnnn]weight.x=nnnnn	对机器分组和权重设置，可以 参见这里(No Java system property)

#Leader选举过程中，打开一次连接的超时时间，默认是5s。(Java system property: zookeeper. cnxTimeout)
cnxTimeout=

#ZK权限设置相关，具体参见 《 使用super 身份对有权限的节点进行操作》 和 《 ZooKeeper 权限控制》
#zookeeper.DigestAuthenticationProvider=
#.superDigest	

#对所有客户端请求都不作ACL检查。如果之前节点上设置有权限限制，一旦服务器上打开这个开头，那么也将失效。(Java system property: zookeeper.skipACL)
skipACL=

#这个参数确定了是否需要在事务日志提交的时候调用FileChannel.force来保证数据完全同步到磁盘。(Java system property: zookeeper.forceSync)
forceSync=

#每个节点最大数据量，是默认是1M。这个限制必须在server和client端都进行设置才会生效。(Java system property: jute.maxbuffer)
jute.maxbuffer=